/**********************************************************************/
/*           This is the podem test pattern generator for tdf atpg    */
/*                                                                    */
/*           Author: Pei-Chen(Jenny) Yen                              */
/*           last update : 06/01/2020                                 */
/**********************************************************************/
#include "atpg.h"

void ATPG::dynamic_test_compress(int &current_backtracks)
{
    forward_list<fptr>::iterator fault_it = flist_undetect.begin();
    fptr second_fault;
    int gen_result;
    int i;
    // vector generated by primary fault is given in the form of n+1 bits
    // the last bit represents an extra shift-in bit for LOS
    vector<int> tmp_vec = tdf_vec;
    while(true){
        // select secondary fault
        // TODO
        second_fault = get_second_fault();
        // end TODO
        // terminate dtc if no more fault to choose
        if(second_fault==nullptr) break;
        // load v2
        i = 0;
        for(wptr pi : cktin){
            if(i == 0) pi->value = tmp_vec.back();
            else pi->value = tmp_vec[i-1];
            pi->set_changed();
            i++;
        }
        sim();
        // expand v2
        gen_result = tdf_podem(second_fault, current_backtracks, false);
        if(gen_result!=TRUE) continue;
        // collect v2 on tmp_vec
        i = 0;
        for(wptr pi : cktin){
            if(i==0) tmp_vec.back() = pi->value;
            else tmp_vec[i-1] = pi->value;
            i++;
        }
        // load v1
        i = 0;
        for(wptr pi : cktin){
            pi->value = tmp_vec[i];
            pi->set_changed();
            i++;
        }
        sim();
        // expand v1
        gen_result = tdf_podem_activate(second_fault, current_backtracks, false);
        if(gen_result!=TRUE) continue;
        // collect v1 on tmp_vec
        i = 0;
        for(wptr pi : cktin){
            tmp_vec[i] = pi->value;
            i++;
        }
        tdf_vec = tmp_vec;
    }
}

// TODO
ATPG::fptr ATPG::get_second_fault()
{
    return nullptr;
}